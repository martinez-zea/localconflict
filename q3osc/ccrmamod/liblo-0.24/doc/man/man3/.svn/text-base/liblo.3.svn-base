.TH "High-level OSC API" 3 "5 Dec 2007" "Version 0.24" "liblo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
High-level OSC API \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlo_timetag\fP"
.br
.RI "\fIA structure to store OSC TimeTag values. \fP"
.ti -1c
.RI "union \fBlo_arg\fP"
.br
.RI "\fIUnion used to read values from incoming messages. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBLO_TT_IMMEDIATE\fP   ((\fBlo_timetag\fP){0U,0U})"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBlo_type\fP { \fBLO_INT32\fP =  'i', \fBLO_FLOAT\fP =  'f', \fBLO_STRING\fP =  's', \fBLO_BLOB\fP =  'b', \fBLO_INT64\fP =  'h', \fBLO_TIMETAG\fP =  't', \fBLO_DOUBLE\fP =  'd', \fBLO_SYMBOL\fP =  'S', \fBLO_CHAR\fP =  'c', \fBLO_MIDI\fP =  'm', \fBLO_TRUE\fP =  'T', \fBLO_FALSE\fP =  'F', \fBLO_NIL\fP =  'N', \fBLO_INFINITUM\fP =  'I' }"
.br
.RI "\fIAn enumeration of the OSC types liblo can send and receive. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlo_address\fP \fBlo_address_new\fP (const char *host, const char *port)"
.br
.RI "\fIDeclare an OSC destination, given IP address and port number. \fP"
.ti -1c
.RI "\fBlo_address\fP \fBlo_address_new_from_url\fP (const char *url)"
.br
.RI "\fICreate a lo_address object from an OSC URL. \fP"
.ti -1c
.RI "void \fBlo_address_free\fP (\fBlo_address\fP t)"
.br
.RI "\fIFree the memory used by the lo_address object. \fP"
.ti -1c
.RI "int \fBlo_send\fP (\fBlo_address\fP targ, const char *path, const char *type,...)"
.br
.RI "\fISend a OSC formatted message to the address specified. \fP"
.ti -1c
.RI "int \fBlo_send_from\fP (\fBlo_address\fP targ, \fBlo_server\fP from, \fBlo_timetag\fP ts, const char *path, const char *type,...)"
.br
.RI "\fISend a OSC formatted message to the address specified, from the same socket as the specificied server. \fP"
.ti -1c
.RI "int \fBlo_send_timestamped\fP (\fBlo_address\fP targ, \fBlo_timetag\fP ts, const char *path, const char *type,...)"
.br
.RI "\fISend a OSC formatted message to the address specified, scheduled to be dispatch at some time in the future. \fP"
.ti -1c
.RI "int \fBlo_address_errno\fP (\fBlo_address\fP a)"
.br
.RI "\fIReturn the error number from the last failed lo_send or lo_address_new call. \fP"
.ti -1c
.RI "const char * \fBlo_address_errstr\fP (\fBlo_address\fP a)"
.br
.RI "\fIReturn the error string from the last failed lo_send or lo_address_new call. \fP"
.ti -1c
.RI "\fBlo_server_thread\fP \fBlo_server_thread_new\fP (const char *port, \fBlo_err_handler\fP err_h)"
.br
.RI "\fICreate a new server thread to handle incoming OSC messages. \fP"
.ti -1c
.RI "\fBlo_server_thread\fP \fBlo_server_thread_new_with_proto\fP (const char *port, int proto, \fBlo_err_handler\fP err_h)"
.br
.RI "\fICreate a new server thread to handle incoming OSC messages, specifying protocol. \fP"
.ti -1c
.RI "void \fBlo_server_thread_free\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIFree memory taken by a server thread. \fP"
.ti -1c
.RI "\fBlo_method\fP \fBlo_server_thread_add_method\fP (\fBlo_server_thread\fP st, const char *path, const char *typespec, \fBlo_method_handler\fP h, void *user_data)"
.br
.RI "\fIAdd an OSC method to the specifed server thread. \fP"
.ti -1c
.RI "void \fBlo_server_thread_del_method\fP (\fBlo_server_thread\fP st, const char *path, const char *typespec)"
.br
.RI "\fIDelete an OSC method from the specifed server thread. \fP"
.ti -1c
.RI "void \fBlo_server_thread_start\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIStart the server thread. \fP"
.ti -1c
.RI "void \fBlo_server_thread_stop\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIStop the server thread. \fP"
.ti -1c
.RI "int \fBlo_server_thread_get_port\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn the port number that the server thread has bound to. \fP"
.ti -1c
.RI "char * \fBlo_server_thread_get_url\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn a URL describing the address of the server thread. \fP"
.ti -1c
.RI "\fBlo_server\fP \fBlo_server_thread_get_server\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn the lo_server for a lo_server_thread. \fP"
.ti -1c
.RI "int \fBlo_server_thread_events_pending\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn true if there are scheduled events (eg. from bundles) waiting to be dispatched by the thread. \fP"
.ti -1c
.RI "\fBlo_blob\fP \fBlo_blob_new\fP (int32_t size, const void *data)"
.br
.RI "\fICreate a new OSC blob type. \fP"
.ti -1c
.RI "void \fBlo_blob_free\fP (\fBlo_blob\fP b)"
.br
.RI "\fIFree the memory taken by a blob. \fP"
.ti -1c
.RI "uint32_t \fBlo_blob_datasize\fP (\fBlo_blob\fP b)"
.br
.RI "\fIReturn the ammount of valid data in a lo blob object. \fP"
.ti -1c
.RI "void * \fBlo_blob_dataptr\fP (\fBlo_blob\fP b)"
.br
.RI "\fIReturn a pointer to the start of the blob data to allow contents to be changed. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Defines the high-level API functions neccesary to implement OSC support. Should be adequate for most applications, but ig you require lower level control you can use the functions defined in \fBlo_lowlevel.h\fP. 
.SH "Define Documentation"
.PP 
.SS "#define LO_TT_IMMEDIATE   ((\fBlo_timetag\fP){0U,0U})"
.PP
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBlo_type\fP"
.PP
An enumeration of the OSC types liblo can send and receive. 
.PP
The value of the enumeration is the typechar used to tag messages and to specify arguemnts with \fBlo_send()\fP. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fILO_INT32 \fP\fP
32 bit signed integer. 
.TP
\fB\fILO_FLOAT \fP\fP
32 bit IEEE-754 float. 
.TP
\fB\fILO_STRING \fP\fP
Standard C, NULL terminated string. 
.TP
\fB\fILO_BLOB \fP\fP
OSC binary blob type. Accessed using the lo_blob_*() functions. 
.TP
\fB\fILO_INT64 \fP\fP
64 bit signed integer. 
.TP
\fB\fILO_TIMETAG \fP\fP
OSC TimeTag type, represented by the \fBlo_timetag\fP structure. 
.TP
\fB\fILO_DOUBLE \fP\fP
64 bit IEEE-754 double. 
.TP
\fB\fILO_SYMBOL \fP\fP
Standard C, NULL terminated, string. Used in systems which distinguish strings and symbols. 
.TP
\fB\fILO_CHAR \fP\fP
Standard C, 8 bit, char variable. 
.TP
\fB\fILO_MIDI \fP\fP
A 4 byte MIDI packet. 
.TP
\fB\fILO_TRUE \fP\fP
Sybol representing the value True. 
.TP
\fB\fILO_FALSE \fP\fP
Sybol representing the value False. 
.TP
\fB\fILO_NIL \fP\fP
Sybol representing the value Nil. 
.TP
\fB\fILO_INFINITUM \fP\fP
Sybol representing the value Infinitum. 
.SH "Function Documentation"
.PP 
.SS "int lo_address_errno (\fBlo_address\fP a)"
.PP
Return the error number from the last failed lo_send or lo_address_new call. 
.PP
.SS "const char* lo_address_errstr (\fBlo_address\fP a)"
.PP
Return the error string from the last failed lo_send or lo_address_new call. 
.PP
.SS "void lo_address_free (\fBlo_address\fP t)"
.PP
Free the memory used by the lo_address object. 
.PP
.SS "\fBlo_address\fP lo_address_new (const char * host, const char * port)"
.PP
Declare an OSC destination, given IP address and port number. 
.PP
\fBParameters:\fP
.RS 4
\fIhost\fP An IP address or number, or NULL for the local machine. 
.br
\fIport\fP a decimal port number or service name.
.RE
.PP
The lo_address object may be used as the target of OSC messages.
.PP
Note: if you wish to receive replies from the target of this address, you must first create a lo_server_thread or lo_server object which will receive the replies. The last lo_server(_thread) object creted will be the receiver. 
.SS "\fBlo_address\fP lo_address_new_from_url (const char * url)"
.PP
Create a lo_address object from an OSC URL. 
.PP
example: osc.udp://localhost:4444/my/path/ 
.SS "void* lo_blob_dataptr (\fBlo_blob\fP b)"
.PP
Return a pointer to the start of the blob data to allow contents to be changed. 
.PP
.SS "uint32_t lo_blob_datasize (\fBlo_blob\fP b)"
.PP
Return the ammount of valid data in a lo blob object. 
.PP
If you want to know the storage size, use \fBlo_arg_size()\fP. 
.SS "void lo_blob_free (\fBlo_blob\fP b)"
.PP
Free the memory taken by a blob. 
.PP
.SS "\fBlo_blob\fP lo_blob_new (int32_t size, const void * data)"
.PP
Create a new OSC blob type. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The ammount of space to allocate in the blob structure. 
.br
\fIdata\fP The data that will be used to initialise the blob, should be size bytes long. 
.RE
.PP

.SS "int lo_send (\fBlo_address\fP targ, const char * path, const char * type,  ...)"
.PP
Send a OSC formatted message to the address specified. 
.PP
\fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in lo_types_common.h 
.br
\fI...\fP The data values to be transmitted. The types of the arguments passed here must agree with the types specified in the type parameter.
.RE
.PP
example:
.br
 lo_send(t, '/foo/bar', 'ff', 0.1f, 23.0f);
.PP
returns -1 on failure. 
.SS "int lo_send_from (\fBlo_address\fP targ, \fBlo_server\fP from, \fBlo_timetag\fP ts, const char * path, const char * type,  ...)"
.PP
Send a OSC formatted message to the address specified, from the same socket as the specificied server. 
.PP
\fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIfrom\fP The server to send message from (can be NULL to use new socket) 
.br
\fIts\fP The OSC timetag timestamp at which the message will be processed (can be LO_TT_IMMEDIATE if you don't want to attach a timetag) 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in lo_types_common.h 
.br
\fI...\fP The data values to be transmitted. The types of the arguments passed here must agree with the types specified in the type parameter.
.RE
.PP
example:
.br
 serv = lo_server_new(NULL, err);
.br
 lo_server_add_method(serv, '/reply', 'ss', reply_handler, NULL); lo_send_from(t, serv, LO_TT_IMMEDIATE, '/foo/bar', 'ff', 0.1f, 23.0f);
.PP
on success returns the number of bytes sent, returns -1 on failure. 
.SS "int lo_send_timestamped (\fBlo_address\fP targ, \fBlo_timetag\fP ts, const char * path, const char * type,  ...)"
.PP
Send a OSC formatted message to the address specified, scheduled to be dispatch at some time in the future. 
.PP
\fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIts\fP The OSC timetag timestamp at which the message will be processed 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in lo_types_common.h 
.br
\fI...\fP The data values to be transmitted. The types of the arguments passed here must agree with the types specified in the type parameter.
.RE
.PP
example:
.br
 \fBlo_timetag\fP now;
.br
 lo_timetag_now(&now);
.br
 lo_send_timestamped(t, now, '/foo/bar', 'ff', 0.1f, 23.0f);
.PP
on success returns the number of bytes sent, returns -1 on failure. 
.SS "\fBlo_method\fP lo_server_thread_add_method (\fBlo_server_thread\fP st, const char * path, const char * typespec, \fBlo_method_handler\fP h, void * user_data)"
.PP
Add an OSC method to the specifed server thread. 
.PP
\fBParameters:\fP
.RS 4
\fIst\fP The server thread the method is to be added to. 
.br
\fIpath\fP The OSC path to register the method to. If NULL is passed the method will match all paths. 
.br
\fItypespec\fP The typespec the method accepts. Incoming messages with similar typespecs (e.g. ones with numerical types in the same position) will be coerced to the typespec given here. 
.br
\fIh\fP The method handler callback function that will be called it a matching message is received 
.br
\fIuser_data\fP A value that will be passed to the callback function, h, when its invoked matching from this method. 
.RE
.PP

.SS "void lo_server_thread_del_method (\fBlo_server_thread\fP st, const char * path, const char * typespec)"
.PP
Delete an OSC method from the specifed server thread. 
.PP
\fBParameters:\fP
.RS 4
\fIst\fP The server thread the method is to be removed from. 
.br
\fIpath\fP The OSC path of the method to delete. If NULL is passed the method will match the generic handler. 
.br
\fItypespec\fP The typespec the method accepts. 
.RE
.PP

.SS "int lo_server_thread_events_pending (\fBlo_server_thread\fP st)"
.PP
Return true if there are scheduled events (eg. from bundles) waiting to be dispatched by the thread. 
.PP
.SS "void lo_server_thread_free (\fBlo_server_thread\fP st)"
.PP
Free memory taken by a server thread. 
.PP
Frees the memory, and, if currently running will stop the associated thread. 
.SS "int lo_server_thread_get_port (\fBlo_server_thread\fP st)"
.PP
Return the port number that the server thread has bound to. 
.PP
.SS "\fBlo_server\fP lo_server_thread_get_server (\fBlo_server_thread\fP st)"
.PP
Return the lo_server for a lo_server_thread. 
.PP
This function is useful for passing a thread's lo_server to \fBlo_send_from()\fP. 
.SS "char* lo_server_thread_get_url (\fBlo_server_thread\fP st)"
.PP
Return a URL describing the address of the server thread. 
.PP
Return value must be free()'d to reclaim memory. 
.SS "\fBlo_server_thread\fP lo_server_thread_new (const char * port, \fBlo_err_handler\fP err_h)"
.PP
Create a new server thread to handle incoming OSC messages. 
.PP
Server threads take care of the message reception and dispatch by transparently creating a systme thread to handle incoming messages. Use this if you do not want to handle the threading yourself.
.PP
\fBParameters:\fP
.RS 4
\fIport\fP If NULL is passed then an unused port will be chosen by the system, its number may be retreived with \fBlo_server_thread_get_port()\fP so it can be passed to clients. Otherwise a decimal port number, service name or UNIX domain socket path may be passed. 
.br
\fIerr_h\fP A function that will be called in the event of an error being raised. The function prototype is defined in \fBlo_types.h\fP 
.RE
.PP

.SS "\fBlo_server_thread\fP lo_server_thread_new_with_proto (const char * port, int proto, \fBlo_err_handler\fP err_h)"
.PP
Create a new server thread to handle incoming OSC messages, specifying protocol. 
.PP
Server threads take care of the message reception and dispatch by transparently creating a systme thread to handle incoming messages. Use this if you do not want to handle the threading yourself.
.PP
\fBParameters:\fP
.RS 4
\fIport\fP If NULL is passed then an unused port will be chosen by the system, its number may be retreived with \fBlo_server_thread_get_port()\fP so it can be passed to clients. Otherwise a decimal port number, service name or UNIX domain socket path may be passed. 
.br
\fIproto\fP The protocol to use, should be one of LO_UDP, LO_TCP or LO_UNIX. 
.br
\fIerr_h\fP A function that will be called in the event of an error being raised. The function prototype is defined in \fBlo_types.h\fP 
.RE
.PP

.SS "void lo_server_thread_start (\fBlo_server_thread\fP st)"
.PP
Start the server thread. 
.PP
\fBParameters:\fP
.RS 4
\fIst\fP the server thread to start. 
.RE
.PP

.SS "void lo_server_thread_stop (\fBlo_server_thread\fP st)"
.PP
Stop the server thread. 
.PP
\fBParameters:\fP
.RS 4
\fIst\fP the server thread to start. 
.RE
.PP

